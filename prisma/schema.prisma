generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Board {
  id        String   @id @default(cuid())
  title     String
  lists     List[]
  labels    Label[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model List {
  id        String   @id @default(cuid())
  boardId   String
  board     Board    @relation(fields: [boardId], references: [id], onDelete: Cascade)
  title     String
  position  Int
  cards     Card[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([boardId])
  @@index([position])
}

model Card {
  id          String     @id @default(cuid())
  listId      String
  list        List       @relation(fields: [listId], references: [id], onDelete: Cascade)
  title       String
  description String?
  position    Int
  dueDate     DateTime?
  comments    Comment[]
  labels      CardLabel[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@index([listId])
  @@index([position])
}

model Label {
  id      String  @id @default(cuid())
  boardId String
  board   Board   @relation(fields: [boardId], references: [id], onDelete: Cascade)
  name    String
  color   String
  cards   CardLabel[]

  @@index([boardId])
}

model CardLabel {
  cardId  String
  labelId String

  card  Card  @relation(fields: [cardId], references: [id], onDelete: Cascade)
  label Label @relation(fields: [labelId], references: [id], onDelete: Cascade)

  @@id([cardId, labelId])
}

model Comment {
  id        String   @id @default(cuid())
  cardId    String
  card      Card     @relation(fields: [cardId], references: [id], onDelete: Cascade)
  authorId  String?
  body      String
  createdAt DateTime @default(now())
}
