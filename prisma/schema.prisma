generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("PRISMA_DATABASE_URL") // Vercel Postgres (Pooling)
  directUrl = env("DATABASE_URL")  // Non-pooling for migrate
}

model Board {
  id        String   @id
  title     String
  position  Int      @default(1024) 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  lists     List[]

  @@index([position])
}

model List {
  id        String   @id
  boardId   String
  title     String
  position  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  board     Board    @relation(fields: [boardId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  cards     Card[]

  @@index([boardId])
  @@index([position])
}

model Card {
  id        String   @id
  listId    String
  title     String
  description String?
  position  Int
  dueDate   DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  list      List     @relation(fields: [listId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([listId])
  @@index([position])
}

// --- 拡張用 ---
model Label {
  id      String @id
  boardId String
  name    String
  color   String
  board   Board  @relation(fields: [boardId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([boardId])
}

model CardLabel {
  cardId  String
  labelId String
  card    Card   @relation(fields: [cardId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  label   Label  @relation(fields: [labelId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([cardId, labelId])
}

model Comment {
  id        String  @id
  cardId    String
  authorId  String?
  body      String
  createdAt DateTime @default(now())
  card      Card     @relation(fields: [cardId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}
